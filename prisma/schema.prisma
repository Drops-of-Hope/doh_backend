generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String                  @id @default(uuid())
  nic                    String                  @unique
  email                  String                  @unique
  name                   String
  bloodGroup             BloodGroup
  createdAt              DateTime                @default(now())
  donationBadge          DonationBadge           @default(BRONZE)
  isActive               Boolean                 @default(true)
  profileImageUrl        String?
  totalDonations         Int                     @default(0)
  totalPoints            Int                     @default(0)
  updatedAt              DateTime                @updatedAt
  nextEligible           DateTime?
  activities             Activity[]
  appointments           Appointment[]
  auditLogs              AuditLog[]
  bloodDonations         BloodDonation[]
  bloodDonationForms     BloodDonationForm[]
  CalibrationLog         CalibrationLog[]
  campaignsOrganized     Campaign[]
  campaignParticipations CampaignParticipation[]
  emergencyRequests      EmergencyRequest[]
  EquipmentAssignment    EquipmentAssignment[]
  feedbacks              Feedback[]
  MaintenanceLog         MaintenanceLog[]
  notifications          Notification[]
  qrScans                QRScan[]
  StaffAssignment        StaffAssignment[]
  userDetails            UserDetail?
  homeStats              UserHomeStats?
}

model UserDetail {
  id                String   @id @default(uuid())
  address           String
  city              String
  userId            String   @unique
  allergies         Json?
  emergencyContact  String?
  medicalConditions Json?
  phoneNumber       String?
  district          District
  type              UserType @default(DONOR)
  user              User     @relation(fields: [userId], references: [id])
}

model UserHomeStats {
  id                  String    @id @default(uuid())
  userId              String    @unique
  nextAppointmentDate DateTime?
  nextAppointmentId   String?
  totalDonations      Int       @default(0)
  totalPoints         Int       @default(0)
  donationStreak      Int       @default(0)
  lastDonationDate    DateTime?
  eligibleToDonate    Boolean   @default(true)
  nextEligibleDate    DateTime?
  lastUpdated         DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id])
}

model Activity {
  id          String       @id @default(uuid())
  userId      String
  type        ActivityType
  title       String
  description String
  metadata    Json?
  createdAt   DateTime     @default(now())
  isRead      Boolean      @default(false)
  user        User         @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  metadata  Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
}

model CampaignParticipation {
  id                String              @id @default(uuid())
  userId            String
  campaignId        String
  registrationDate  DateTime            @default(now())
  status            ParticipationStatus @default(REGISTERED)
  qrCodeScanned     Boolean             @default(false)
  scannedAt         DateTime?
  scannedById       String?
  attendanceMarked  Boolean             @default(false)
  donationCompleted Boolean             @default(false)
  pointsEarned      Int                 @default(0)
  feedback          String?
  feedbackRating    Int?
  campaign          Campaign            @relation(fields: [campaignId], references: [id])
  user              User                @relation(fields: [userId], references: [id])
  qrScans           QRScan[]
}

model QRScan {
  id                      String                 @id @default(uuid())
  scannerId               String
  scannedUserId           String
  campaignId              String?
  campaignParticipationId String?
  scanType                QRScanType
  scanDateTime            DateTime               @default(now())
  metadata                Json?
  campaign                Campaign?              @relation(fields: [campaignId], references: [id])
  campaignParticipation   CampaignParticipation? @relation(fields: [campaignParticipationId], references: [id])
  scanner                 User                   @relation(fields: [scannerId], references: [id])
}

model EmergencyRequest {
  id                  String              @id @default(uuid())
  title               String
  description         String
  bloodTypesNeeded    Json
  quantityNeeded      Json
  urgencyLevel        UrgencyLevel
  hospitalId          String
  requestedById       String
  status              EmergencyStatus     @default(ACTIVE)
  expiresAt           DateTime
  fulfilledAt         DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  contactNumber       String
  specialInstructions String?
  hospital            Hospital            @relation(fields: [hospitalId], references: [id])
  requestedBy         User                @relation(fields: [requestedById], references: [id])
  responses           EmergencyResponse[]
}

model EmergencyResponse {
  id                 String           @id @default(uuid())
  emergencyRequestId String
  userId             String?
  responseType       String
  message            String?
  contactInfo        Json?
  createdAt          DateTime         @default(now())
  emergencyRequest   EmergencyRequest @relation(fields: [emergencyRequestId], references: [id])
}

model Feedback {
  id       String   @id @default(uuid())
  rating   Int
  dateTime DateTime
  userId   String
  user     User     @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  timestamp DateTime
  action    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model BloodDonationForm {
  id                 String         @id @default(uuid())
  dateTime           DateTime
  donorId            String?
  hasDonatedBefore   Boolean?
  anyDifficulty      String
  medicalAdvice      Boolean
  feelingWell        Boolean
  anyDiseases        Json
  takingMedicines    Boolean
  anySurgery         Boolean
  workingLater       Boolean
  pregnant           Boolean
  haveHepatitis      Boolean
  haveTB             Boolean
  hadVaccination     Boolean
  tattoos            Boolean
  haveImprisonment   Boolean
  travelledAbroad    Boolean
  receivedBlood      Boolean
  chemotherapy       Boolean
  hadMalaria         Boolean
  hasDengue          Boolean
  hadLongFever       Boolean
  hadtoothExtraction Boolean
  bookAspirin        Boolean
  Acknowledgement    Boolean
  highRisk           Boolean
  hadWeightLoss      Boolean
  userId             String?
  appointment        Appointment?
  bloodDonation      BloodDonation?
  user               User?          @relation(fields: [userId], references: [id])
}

model BloodDonation {
  id                String            @id @default(uuid())
  bdfId             String            @unique
  userId            String?
  numberOfDonations Int?
  pointsEarned      Int
  startTime         DateTime
  endTime           DateTime
  bloods            Blood[]
  bloodDonationForm BloodDonationForm @relation(fields: [bdfId], references: [id])
  user              User?             @relation(fields: [userId], references: [id])
  systemLogs        SystemLog[]
}

model SystemLog {
  id              String        @id @default(uuid())
  dateTime        DateTime
  level           LogLevel
  message         String
  bloodDonationId String
  bloodDonation   BloodDonation @relation(fields: [bloodDonationId], references: [id])
}

model Payments {
  id         String   @id @default(uuid())
  amount     Float
  accountId  String
  purpose    String
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id])
}

model Campaign {
  id                     String                  @id @default(uuid())
  title                  String
  type                   CampaignType
  location               String
  organizerId            String
  motivation             String
  description            String
  startTime              DateTime
  endTime                DateTime
  expectedDonors         Int
  contactPersonName      String
  contactPersonPhone     String
  isApproved             Boolean
  medicalEstablishmentId String
  bloodbankId            String?
  actualDonors           Int                     @default(0)
  createdAt              DateTime                @default(now())
  imageUrl               String?
  isActive               Boolean                 @default(true)
  requirements           Json?
  updatedAt              DateTime                @updatedAt
  bloodBank              BloodBank?              @relation(fields: [bloodbankId], references: [id])
  medicalEstablishment   MedicalEstablishment    @relation(fields: [medicalEstablishmentId], references: [id])
  organizer              User                    @relation(fields: [organizerId], references: [id])
  participations         CampaignParticipation[]
  equipmentAssignments   EquipmentAssignment[]
  payments               Payments[]
  qrScans                QRScan[]
  staffAssignments       StaffAssignment[]
}

model Appointment {
  id                String             @id @default(uuid())
  donorId           String
  medicalEstablishmentId String
  bdfId             String?            @unique
  scheduled         AppointmentStatus
  appointmentDate   DateTime
  slotId            String
  bloodDonationForm BloodDonationForm? @relation(fields: [bdfId], references: [id], onDelete: Restrict)
  donor             User               @relation(fields: [donorId], references: [id])
  medicalEstablishment MedicalEstablishment @relation(fields: [medicalEstablishmentId], references: [id])
  slot              AppointmentSlot    @relation(fields: [slotId], references: [id])
  bloodTests        BloodTest[]
}

model Inventory {
  id                   String               @id @default(uuid())
  EstablishmentId      String
  lastChecked          DateTime
  blood                Blood[]
  bloodTests           BloodTest[]
  medicalEstablishment MedicalEstablishment @relation(fields: [EstablishmentId], references: [id])
}

model BloodTest {
  id            String       @id @default(uuid())
  bloodId       String
  testDateTime  DateTime
  status        TestStatus
  ABOTest       BloodGroup
  hivTest       Boolean
  hemoglobin    Float
  syphilis      Boolean
  hepatitisB    Boolean
  hepatitisC    Boolean
  malaria       Boolean
  resultPending Boolean
  appointmentId String?
  inventoryId   String?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  blood         Blood        @relation(fields: [bloodId], references: [id])
  inventory     Inventory?   @relation(fields: [inventoryId], references: [id])
}

model Blood {
  id            String         @id @default(uuid())
  donationId    String
  inventoryId   String?
  status        TestStatus
  volume        Float
  bagType       BagType
  expiryDate    DateTime
  consumed      Boolean        @default(false)
  disposed      Boolean        @default(false)
  bloodDonation BloodDonation  @relation(fields: [donationId], references: [id])
  inventory     Inventory?     @relation(fields: [inventoryId], references: [id])
  bloodRequests BloodRequest[]
  bloodTests    BloodTest[]
  bloodTransits BloodTransit[]
}

model BloodRequest {
  id                 String         @id @default(uuid())
  requestedDateTime  DateTime
  bloodTypeAndAmount Json
  status             RequestStatus
  bloodId            String
  bloodBankId        String?
  bloodBank          BloodBank?     @relation(fields: [bloodBankId], references: [id])
  blood              Blood          @relation(fields: [bloodId], references: [id])
  bloodTransits      BloodTransit[]
}

model BloodTransit {
  id                 String        @id @default(uuid())
  transitStatus      TransitStatus
  receiverHospitalId String
  dispatchDateTime   DateTime
  deliveryDateTime   DateTime
  deliveryVehicle    String
  bloodRequestId     String?
  bloodId            String
  bloodBankId        String?
  bloodBank          BloodBank?    @relation(fields: [bloodBankId], references: [id])
  blood              Blood         @relation(fields: [bloodId], references: [id])
  bloodRequest       BloodRequest? @relation(fields: [bloodRequestId], references: [id])
  receiverHospital   Hospital      @relation(fields: [receiverHospitalId], references: [id])
}

model Hospital {
  id                     String               @id @default(uuid())
  isPrivate              Boolean
  name                   String
  address                String
  district               District
  email                  String
  bloodCapacity          Int
  medicalEstablishmentId String
  inventoryId            String?
  bloodTransits          BloodTransit[]
  emergencyRequests      EmergencyRequest[]
  medicalEstablishment   MedicalEstablishment @relation(fields: [medicalEstablishmentId], references: [id])
}

model BloodBank {
  id                     String               @id @default(uuid())
  name                   String
  address                String
  district               District
  email                  String
  bloodCapacity          Int
  isBloodBank            Boolean
  medicalEstablishmentId String
  inventoryId            String?
  medicalEstablishment   MedicalEstablishment @relation(fields: [medicalEstablishmentId], references: [id])
  bloodRequests          BloodRequest[]
  bloodTransits          BloodTransit[]
  campaigns              Campaign[]
}

model MedicalEstablishment {
  id               String            @id @default(uuid())
  name             String
  address          String
  region           String
  email            String
  bloodCapacity    Int
  isBloodBank      Boolean
  appointmentSlots AppointmentSlot[]
  appointments     Appointment[]
  bloodBanks       BloodBank[]
  campaigns        Campaign[]
  equipment        Equipment[]
  hospitals        Hospital[]
  inventory        Inventory[]
}

model AppointmentSlot {
  id                     String               @id @default(uuid())
  startTime              String
  endTime                String
  isAvailable            Boolean              @default(true)
  medicalEstablishmentId String
  donorsPerSlot          Int
  appointments           Appointment[]
  medicalEstablishment   MedicalEstablishment @relation(fields: [medicalEstablishmentId], references: [id])
}

model Equipment {
  id                   String                @id @default(uuid())
  type                 EquipmentType
  serialNumber         String?
  manufacturer         String?
  model                String?
  purchaseDate         DateTime?
  warrantyExpiry       DateTime?
  locatedMedEstId      String
  status               String
  calibrationLogs      CalibrationLog[]
  calibrationSchedules CalibrationSchedule[]
  medicalEstablishment MedicalEstablishment  @relation(fields: [locatedMedEstId], references: [id])
  assignments          EquipmentAssignment[]
  maintenanceLogs      MaintenanceLog[]
}

model EquipmentAssignment {
  id                  String    @id @default(uuid())
  equipmentId         String
  campaignId          String
  assignmentStartDate DateTime
  assignmentEndDate   DateTime?
  assignedById        String
  assignedBy          User      @relation(fields: [assignedById], references: [id])
  campaign            Campaign  @relation(fields: [campaignId], references: [id])
  equipment           Equipment @relation(fields: [equipmentId], references: [id])
}

model CalibrationSchedule {
  id                   String    @id @default(uuid())
  equipmentId          String
  calibrationFrequency String
  nextCalibrationDate  DateTime
  alertBeforeDays      Int?
  equipment            Equipment @relation(fields: [equipmentId], references: [id])
}

model CalibrationLog {
  id              String    @id @default(uuid())
  equipmentId     String
  calibrationDate DateTime
  performedById   String
  result          String
  notes           String?
  equipment       Equipment @relation(fields: [equipmentId], references: [id])
  performedBy     User      @relation(fields: [performedById], references: [id])
}

model MaintenanceLog {
  id              String    @id @default(uuid())
  equipmentId     String
  maintenanceDate DateTime
  type            String
  description     String?
  performedById   String
  cost            Float?
  equipment       Equipment @relation(fields: [equipmentId], references: [id])
  performedBy     User      @relation(fields: [performedById], references: [id])
}

model StaffAssignment {
  id                  String    @id @default(uuid())
  userId              String
  campaignId          String
  roleInCampaign      String
  assignmentStartDate DateTime
  assignmentEndDate   DateTime?
  campaign            Campaign  @relation(fields: [campaignId], references: [id])
  user                User      @relation(fields: [userId], references: [id])
}

model Dummy {
  id        Int    @id @default(autoincrement())
  dummyName String
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum DonationBadge {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

enum UserType {
  DONOR
  STAFF
  ADMIN
  CAMP_ORGANIZER
  MEDICAL_OFFICER
}

enum ActivityType {
  DONATION_COMPLETED
  APPOINTMENT_SCHEDULED
  APPOINTMENT_CANCELLED
  CAMPAIGN_JOINED
  CAMPAIGN_COMPLETED
  QR_SCANNED
  BADGE_EARNED
  POINTS_EARNED
  EMERGENCY_RESPONDED
}

enum NotificationType {
  APPOINTMENT_REMINDER
  CAMPAIGN_INVITATION
  EMERGENCY_ALERT
  DONATION_ELIGIBLE
  BADGE_EARNED
  GENERAL
}

enum ParticipationStatus {
  REGISTERED
  CONFIRMED
  ATTENDED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum QRScanType {
  CAMPAIGN_ATTENDANCE
  DONATION_VERIFICATION
  CHECK_IN
  CHECK_OUT
}

enum UrgencyLevel {
  CRITICAL
  HIGH
  MODERATE
  LOW
}

enum EmergencyStatus {
  ACTIVE
  FULFILLED
  EXPIRED
  CANCELLED
}

enum Role {
  ADMIN
  USER
  STAFF
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

enum CampaignType {
  FIXED
  MOBILE
}

enum AppointmentStatus {
  CANCELLED
  COMPLETED
  PENDING
}

enum TestStatus {
  TESTED
  SAFE
  DISCARDED
  PENDING
}

enum BagType {
  Q
  T
  D
  S
}

enum RequestStatus {
  PENDING
  FULFILLED
  CANCELLED
}

enum TransitStatus {
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum District {
  COLOMBO
  KALUTARA
  GAMPAHA
  GALLE
  MATARA
  HAMBANTOTA
  ANURADHAPURA
  POLONNARUWA
  JAFFNA
  MANNAR
  KILINOCHCHI
  KURUNEGALA
  PUTTALAM
  TRINCOMALEE
  BATTICALOA
  AMPARA
  BADULLA
  KANDY
  KEGALLE
  MATALE
  NUWARA_ELIYA
  MONARAGALA
  MULLAITIVU
  VAVUNIYA
  RATNAPURA
}

enum EquipmentType {
  CENTRIFUGE
  REFRIGERATOR
}
