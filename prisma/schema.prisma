datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum Role {
  ADMIN
  USER
  STAFF
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

enum CampaignType {
  FIXED
  MOBILE
}

enum AppointmentStatus {
  CANCELLED
  COMPLETED
  PENDING
}

enum TestStatus {
  TESTED
  SAFE
  DISCARDED
  PENDING
}

enum BagType {
  Q
  T
  D
  S
}

enum RequestStatus {
  PENDING
  FULFILLED
  CANCELLED
}

enum TransitStatus {
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum District {
  COLOMBO
  KALUTARA
  GAMPAHA
  GALLE
  MATARA
  HAMBANTOTA
  ANURADHAPURA
  POLONNARUWA
  JAFFNA
  MANNAR
  KILINOCHCHI
  KURUNEGALA
  PUTTALAM
  TRINCOMALEE
  BATTICALOA
  AMPARA
  BADULLA
  KANDY
  KEGALLE
  MATALE
  NUWARA_ELIYA
  MONARAGALA
  MULLAITIVU
  VAVUNIYA
  RATNAPURA
}

enum EquipmentType {
  CENTRIFUGE
  REFRIGERATOR
  // Add more as needed
}

// Models
model User {
  id                  Int                   @id @default(autoincrement())
  nic                 String                @unique
  email               String                @unique
  name                String
  bloodGroup          BloodGroup
  createdAt           DateTime              @default(now())
  role                Role
  userDetails         UserDetail?
  feedbacks           Feedback[]
  auditLogs           AuditLog[]
  bloodDonationForms  BloodDonationForm[]
  bloodDonations      BloodDonation[]
  EquipmentAssignment EquipmentAssignment[]
  CalibrationLog      CalibrationLog[]
  MaintenanceLog      MaintenanceLog[]
  StaffAssignment     StaffAssignment[]
  campaignsOrganized  Campaign[]
  appointments        Appointment[]
}

model UserDetail {
  id       Int    @id @default(autoincrement())
  address  String
  city     String
  district String
  type     String
  userId   Int    @unique
  user     User   @relation(fields: [userId], references: [id])
}

model Feedback {
  id       Int      @id @default(autoincrement())
  rating   Int
  dateTime DateTime
  userId   Int
  user     User     @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  timestamp DateTime
  action    String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model BloodDonationForm {
  id                 Int            @id @default(autoincrement())
  dateTime           DateTime
  donorId            Int?
  hasDonatedBefore   Boolean?
  anyDifficulty      String
  medicalAdvice      Boolean
  feelingWell        Boolean
  anyDiseases        Json
  takingMedicines    Boolean
  anySurgery         Boolean
  workingLater       Boolean
  pregnant           Boolean
  haveHepatitis      Boolean
  haveTB             Boolean
  hadVaccination     Boolean
  tattoos            Boolean
  haveImprisonment   Boolean
  travelledAbroad    Boolean
  receivedBlood      Boolean
  chemotherapy       Boolean
  hadMalaria         Boolean
  hasDengue          Boolean
  hadLongFever       Boolean
  hadtoothExtraction Boolean
  bookAspirin        Boolean
  Acknowledgement    Boolean
  highRisk           Boolean
  hadWeightLoss      Boolean
  userId             Int?
  user               User?          @relation(fields: [userId], references: [id])
  bloodDonation      BloodDonation?
  appointment        Appointment?
}

model BloodDonation {
  id                Int               @id @default(autoincrement())
  bdfId             Int               @unique
  userId            Int?
  numberOfDonations Int?
  pointsEarned      Int
  startTime         DateTime
  endTime           DateTime
  bloodDonationForm BloodDonationForm @relation(fields: [bdfId], references: [id])
  user              User?             @relation(fields: [userId], references: [id])
  systemLogs        SystemLog[]
  bloods            Blood[]
}

model SystemLog {
  id              Int           @id @default(autoincrement())
  dateTime        DateTime
  level           LogLevel
  message         String
  bloodDonationId Int
  bloodDonation   BloodDonation @relation(fields: [bloodDonationId], references: [id])
}

model Payments {
  id         Int      @id @default(autoincrement())
  amount     Float
  accountId  String
  purpose    String
  campaignId Int
  campaign   Campaign @relation(fields: [campaignId], references: [id])
}

model Campaign {
  id                     Int                   @id @default(autoincrement())
  title                  String
  type                   CampaignType
  location               String
  organizerId            Int
  motivation             String
  description            String
  startTime              DateTime
  endTime                DateTime
  expectedDonors         Int
  contactPersonName      String
  contactPersonPhone     String
  isApproved             Boolean
  medicalEstablishmentId Int
  medicalEstablishment   MedicalEstablishment  @relation(fields: [medicalEstablishmentId], references: [id])
  payments               Payments[]
  equipmentAssignments   EquipmentAssignment[]
  staffAssignments       StaffAssignment[]
  organizer              User                  @relation(fields: [organizerId], references: [id])
  bloodbankId            Int?
  bloodBank              BloodBank?            @relation(fields: [bloodbankId], references: [id])
}

model Appointment {
  id                  Int               @id @default(autoincrement())
  donorId             Int
  bdfId               Int               @unique
  scheduled           AppointmentStatus
  appointmentDateTime DateTime
  bloodTests          BloodTest[]
  donor               User              @relation(fields: [donorId], references: [id])
  bloodDonationForm   BloodDonationForm @relation(fields: [bdfId], references: [id])
}

model Inventory {
  id                   Int                  @id @default(autoincrement())
  EstablishmentId      Int
  lastChecked          DateTime
  medicalEstablishment MedicalEstablishment @relation(fields: [EstablishmentId], references: [id])
  blood                Blood[]
  bloodTests           BloodTest[]
}

model BloodTest {
  id            Int          @id @default(autoincrement())
  bloodId       Int
  testDateTime  DateTime
  status        TestStatus
  ABOTest       BloodGroup
  hivTest       Boolean
  hemoglobin    Float
  syphilis      Boolean
  hepatitisB    Boolean
  hepatitisC    Boolean
  malaria       Boolean
  resultPending Boolean
  appointmentId Int?
  inventoryId   Int?
  blood         Blood        @relation(fields: [bloodId], references: [id])
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  inventory     Inventory?   @relation(fields: [inventoryId], references: [id])
}

model Blood {
  id            Int            @id @default(autoincrement())
  donationId    Int
  inventoryId   Int?
  status        TestStatus
  volume        Float
  bagType       BagType
  expiryDate    DateTime
  consumed      Boolean        @default(false)
  disposed      Boolean        @default(false)
  bloodDonation BloodDonation  @relation(fields: [donationId], references: [id])
  bloodTests    BloodTest[]
  bloodRequests BloodRequest[]
  bloodTransits BloodTransit[]
  inventory     Inventory?     @relation(fields: [inventoryId], references: [id])
}

model BloodRequest {
  id                 Int            @id @default(autoincrement())
  requestedDateTime  DateTime
  bloodTypeAndAmount Json
  status             RequestStatus
  bloodTransits      BloodTransit[]
  bloodId            Int
  blood              Blood          @relation(fields: [bloodId], references: [id])
  bloodBankId        Int?
  bloodBank          BloodBank?     @relation(fields: [bloodBankId], references: [id])
}

model BloodTransit {
  id                 Int           @id @default(autoincrement())
  transitStatus      TransitStatus
  receiverHospitalId Int
  dispatchDateTime   DateTime
  deliveryDateTime   DateTime
  deliveryVehicle    String
  receiverHospital   Hospital      @relation(fields: [receiverHospitalId], references: [id])
  bloodRequest       BloodRequest? @relation(fields: [bloodRequestId], references: [id])
  bloodRequestId     Int?
  bloodId            Int
  blood              Blood         @relation(fields: [bloodId], references: [id])
  bloodBankId        Int?
  bloodBank          BloodBank?    @relation(fields: [bloodBankId], references: [id])
}

model Hospital {
  id                     Int                  @id @default(autoincrement())
  isPrivate              Boolean
  name                   String
  address                String
  district               District
  email                  String
  bloodCapacity          Int
  medicalEstablishmentId Int
  inventoryId            Int?
  medicalEstablishment   MedicalEstablishment @relation(fields: [medicalEstablishmentId], references: [id])
  bloodTransits          BloodTransit[]
}

model BloodBank {
  id                     Int                  @id @default(autoincrement())
  name                   String
  address                String
  district               District
  email                  String
  bloodCapacity          Int
  isBloodBank            Boolean
  medicalEstablishmentId Int
  medicalEstablishment   MedicalEstablishment @relation(fields: [medicalEstablishmentId], references: [id])
  inventoryId            Int?
  bloodTransits          BloodTransit[]
  bloodRequests          BloodRequest[]
  campaigns              Campaign[]
}

model MedicalEstablishment {
  id            Int         @id @default(autoincrement())
  name          String
  address       String
  region        String
  email         String
  bloodCapacity Int
  isBloodBank   Boolean
  hospitals     Hospital[]
  bloodBanks    BloodBank[]
  campaigns     Campaign[]
  equipment     Equipment[]
  inventory     Inventory[]
}

model Equipment {
  id                   Int                   @id @default(autoincrement())
  type                 EquipmentType
  serialNumber         String?
  manufacturer         String?
  model                String?
  purchaseDate         DateTime?
  warrantyExpiry       DateTime?
  locatedMedEstId      Int
  status               String
  medicalEstablishment MedicalEstablishment  @relation(fields: [locatedMedEstId], references: [id])
  assignments          EquipmentAssignment[]
  calibrationSchedules CalibrationSchedule[]
  calibrationLogs      CalibrationLog[]
  maintenanceLogs      MaintenanceLog[]
}

model EquipmentAssignment {
  id                  Int       @id @default(autoincrement())
  equipmentId         Int
  campaignId          Int
  assignmentStartDate DateTime
  assignmentEndDate   DateTime?
  assignedById        Int
  equipment           Equipment @relation(fields: [equipmentId], references: [id])
  campaign            Campaign  @relation(fields: [campaignId], references: [id])
  assignedBy          User      @relation(fields: [assignedById], references: [id])
}

model CalibrationSchedule {
  id                   Int       @id @default(autoincrement())
  equipmentId          Int
  calibrationFrequency String
  nextCalibrationDate  DateTime
  alertBeforeDays      Int?
  equipment            Equipment @relation(fields: [equipmentId], references: [id])
}

model CalibrationLog {
  id              Int       @id @default(autoincrement())
  equipmentId     Int
  calibrationDate DateTime
  performedById   Int
  result          String
  notes           String?
  equipment       Equipment @relation(fields: [equipmentId], references: [id])
  performedBy     User      @relation(fields: [performedById], references: [id])
}

model MaintenanceLog {
  id              Int       @id @default(autoincrement())
  equipmentId     Int
  maintenanceDate DateTime
  type            String
  description     String?
  performedById   Int
  cost            Float?
  equipment       Equipment @relation(fields: [equipmentId], references: [id])
  performedBy     User      @relation(fields: [performedById], references: [id])
}

model StaffAssignment {
  id                  Int       @id @default(autoincrement())
  userId              Int
  campaignId          Int
  roleInCampaign      String
  assignmentStartDate DateTime
  assignmentEndDate   DateTime?
  user                User      @relation(fields: [userId], references: [id])
  campaign            Campaign  @relation(fields: [campaignId], references: [id])
}
